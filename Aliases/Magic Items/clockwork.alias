<drac2>
# !clockwork, found in https://avrae.io/dashboard/workshop/5f8ae71ebbee1bca82ad38d2
# CC check
cc = 'Clockwork Amulet'
ch = character()
ch.create_cc_nx(cc,0,1,'long','bubble',desc="This copper amulet contains tiny interlocking gears and is powered by magic from Mechanus, a plane of clockwork predictability. A creature that puts an ear to the amulet can hear faint ticking and whirring noises coming from within.\n\nWhen you make an attack roll while wearing the amulet, you can forgo rolling the d20 to get a 10 on the die. Once used, this property can't be used again until the next dawn.\nItem | XGtE 137")
if not ch.get_cc(cc) and not argparse(&ARGS&).get('i'):
	err('No remaining uses of your Clockwork Amulet.')
# get the attack string
args = &ARGS&
attack_type = 'cast' if args[0].lower().startswith('cast') else 'attack'
if attack_type == 'attack':
	args = args[1:] if args[0].lower().startswith(('attack', 'a')) else args
	aname = args[0] if args else err('No attack name specified.')
	attack = [a for a in ch.attacks if aname.lower() in a.name.lower()]
	if not attack:
	    err('Attack not found')
	auto = attack[0].raw.automation
	auto_target = [e for e in auto if e.type == 'target']
	if not auto_target:
	    err('Attack has invalid automation. No Target.')
	effect = [e for e in auto_target[0].effects if e.type == 'attack']
	if not effect:
	    err('Attack has invalid automation. No Effects in Target.')
	attack_automation = effect[0].attackBonus
else:
	attack_automation = ch.spellbook.sab
	for spell in ch.spellbook.spells:
		if args[0].lower() in spell.name.lower() and spell.sab is not None:
			attack_automation = spell.sab
# evaluate it
globals = {"charismaMod": charismaMod, "charismaSave": charismaSave, "charisma": charisma, "constitutionMod": constitutionMod, "constitutionSave": constitutionSave, "constitution": constitution, "description": description, "dexterityMod": dexterityMod, "dexteritySave": dexteritySave, "dexterity": dexterity, "intelligenceMod": intelligenceMod, "intelligenceSave": intelligenceSave, "intelligence": intelligence, "proficiencyBonus": proficiencyBonus, "strengthMod": strengthMod, "strengthSave": strengthSave, "strength": strength, "wisdomMod": wisdomMod, "wisdomSave": wisdomSave, "wisdom": wisdom, "hp": hp, "image": image, "level": level, "name": name, "spell": spell, "armor": armor
}
globals.update(ch.cvars)
functions_splittable = { 'all': all, 'any': any, 'max': max, 'min': min, 'round': round, 'sum': sum, 'sqrt': sqrt, 'int': int}
code = str(attack_automation) or '0'
before = code
for g in globals:
  code = code.replace(g, str(globals[g]))
before_functions = code
for f in functions_splittable:
    first_call = 0
    close = 0
    inside = ''
    if not f in code:
        continue
    first_call = code.index(f'{f}(')
    for index, letter in enumerate(code[first_call:]):
        if letter == ')':
            close = first_call+index
            inside = code[first_call+len(f'{f}('):close]
            break
    if f in functions_splittable:
        args = inside.split(',')
        out = functions_splittable[f]([int(a) for a in args] if len(args) > 1 else int(args[0]))
        code = code[:first_call] + str(out) + code[close+1:]
code = vroll(code).total
clockwork_hit = 10 + code
# target code
rargs = &ARGS&
args = argparse(rargs)
c = combat()
target = args.last('t')
if not target:
	err('No target specified.')
combatant = c.get_combatant(target)
if not combatant:
	err(f'Target {target} not found.')
if not combatant.ac:
	err(f'Target does not have an armor class.')

modified_args = []
hit = 'hit' if combatant.ac <= clockwork_hit else 'miss'
for arg in rargs:
	if arg.lower() in target.lower():
		stripped = arg.strip('"').strip("'")
		if '|' in arg:
			arg = f'"{stripped} {hit}"'
		else:
			arg = f'"{stripped}|{hit}"'
	modified_args.append(arg)
ch.mod_cc(cc, -1) if not argparse(&ARGS&).get('i') else ''
modified_args = [(f'"{a}"' if ' ' in a else a) for a in modified_args]
text = f'''-f "Clockwork Amulet|{ch.cc_str(cc)} {'(-1)' if not argparse(&ARGS&).get('i') else ''}\nWhen you make an attack roll while wearing the amulet, you can forgo rolling the d20 to get a 10 on the die. Once used, this property can\'t be used again until the next dawn." -phrase "using their Clockwork Amulet!*\n**To Hit:** 10 + {code} = **`{10+code}`*" -f "{ctx.prefix}{ctx.alias} [attack/cast] [-t target] [args] [-i]" -thumb https://cdn.discordapp.com/attachments/709738212209197189/799105852560113674/download.jpg '''
if modified_args[0].lower() not in ['cast', 'attack', 'a']:
	modified_args.insert(0, 'attack')
return f'{" ".join(modified_args)} {text}'
</drac2>