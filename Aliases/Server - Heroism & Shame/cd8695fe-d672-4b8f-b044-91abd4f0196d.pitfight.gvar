<drac2>
# Globals
args = argparse(args)
skill_list = get_raw().skills

dc_1 = 15
dc_2 = 20
dc_3 = 20

successes = 0
lingering = False
lingering_list = load_json(get_gvar('b40a1658-c07a-40fb-ac5d-5dba85b44c39'))

# Return Variables
return_title = '-title "Pit-Fighting"'
return_desc = ''
return_fields = ''
return_footer = '-footer "!pitfight help | Dr Turtle#1771"'

# If Help arg is passed, display help:
if args.get('help'):
	return_title = '-title "Pit Fighting - Help"'
	return_desc = '-desc "To use this command, do `!pitfight` If you have adv on all checks, add `adv`. If you have adv on one of the checks, use `adv1`, `adv2`, etc."'
	return ''

# Find which check to use
firstcheck_skillb = max([(skill_list['athletics'], 'Athletics'), (skill_list['acrobatics'], 'Acrobatics'), (skill_list['performance'], 'performance')])

# If global advantage or adv1 arg is passed
if args.adv() == 1 or args.get('adv1'):
	firstcheck_roll = vroll(f'2d20kh1+{firstcheck_skillb[0]}')
elif args.adv() == -1 or args.get('dis1'):
	firstcheck_roll = vroll(f'2d20kl1+{firstcheck_skillb[0]}')
else:
	firstcheck_roll = vroll(f'1d20+{firstcheck_skillb[0]}')

# Second check, determine whether they have athletics proficiency
secondcheck_prof = strengthMod+proficiencyBonus == skill_list['athletics']
secondcheck_skillb = constitutionMod+proficiencyBonus if secondcheck_prof else constitutionMod
# If global advantage or adv2 arg is passed
if args.adv() == 1 or args.get('adv2'):
	secondcheck_roll = vroll(f'2d20kh1+{secondcheck_skillb}')
elif args.adv() == -1 or args.get('dis2'):
	secondcheck_roll = vroll(f'2d20kl1+{secondcheck_skillb}')
else:
	secondcheck_roll = vroll(f'1d20+{secondcheck_skillb}')

# Third check, logic of first and second combined
thirdcheck_prof = charismaMod+proficiencyBonus == skill_list['intimidation']
thirdcheck_skillb_one = strengthMod+proficiencyBonus if thirdcheck_prof else strengthMod
thirdcheck_skillb = max([(thirdcheck_skillb_one, 'Intimidation (Strength)'), (skill_list['persuasion'], "Persuasion")])
# If global advantage or adv3 arg is passed
if args.adv() == 1 or args.get('adv3'):
	thirdcheck_roll = vroll(f'2d20kh1+{thirdcheck_skillb[0]}')
elif args.adv() == -1 or args.get('dis3'):
	thirdcheck_roll = vroll(f'2d20kl1+{thirdcheck_skillb[0]}')
else:
	thirdcheck_roll = vroll(f'1d20+{thirdcheck_skillb[0]}')

# First roll, check
if firstcheck_roll.total >= dc_1:
	successes += 1
	return_fields += f'-f "Display Check, DC {dc_1}|{firstcheck_skillb[1]}: {str(firstcheck_roll)} <:white_check_mark:739935740447686769>"' # Display (Skill used)
else:
	return_fields += f'-f "Display |{firstcheck_skillb[1]}: {str(firstcheck_roll)} <:x:739936457904619621>"' # Display (Skill used)
# Second roll, check
return_fields += '\n'
if secondcheck_roll.total >= dc_2:
	successes += 1
	return_fields += f'-f "Endurance Check, DC {dc_2}|Athletics (Constitution): {str(secondcheck_roll)} <:white_check_mark:739935740447686769>"'
else:
	lingering = True
	return_fields += f'-f "Endurance Check, DC {dc_2}|Athletics (Constitution): {str(secondcheck_roll)} <:x:739936457904619621>"'
# Third roll, check
return_fields += '\n'
if thirdcheck_roll.total >= dc_3:
	successes += 1
	return_fields += f'-f "Crowd Pleasing Check, DC {dc_3}|{thirdcheck_skillb[1]}: {str(thirdcheck_roll)} <:white_check_mark:739935740447686769>"'
else:
	return_fields += f'-f "Crowd Pleasing Check, DC {dc_3}|{thirdcheck_skillb[1]}: {str(thirdcheck_roll)} <:x:739936457904619621>"'
</drac2>
<drac2>
# Final calculations
# Pass/Fails
return_fields += '\n'
return_fields += f'-f "Final Result|{successes} successes, {3-successes} failures!"'
# Gold
return_fields += '\n'
total_gp = 300 if successes == 3 else 200 if successes == 2 else 110 if successes == 1 else 0
if thirdcheck_roll.total > dc_3:
	total_gp += 50
bags_before = load_json(get('bags', 0))
if bags_before is not 0:
    coin_bag_before = [bag for bag in bags_before if bag[0] == 'Coin Pouch'][0]
    index = bags_before.index(coin_bag_before)
    coin_bag_before[1]['gp'] += total_gp
    return_fields += f'-f "Gold (+{total_gp})|{coin_bag_before[1]['gp']}gp"'
    bags_before[index] = coin_bag_before
    set_cvar('bags', dump_json(bags_before))
# XP
return_fields += '\n'
xp_cc = 'Experience'
before = get_cc(xp_cc)
xp = 200
if secondcheck_roll.total > dc_2:
	xp += 100
mod_cc(xp_cc, +xp)
return_fields += f'-f "XP (+{xp})|{cc_str(xp_cc)}"'
# Lingering
if lingering:
	return_fields += '\n'
	lingering_roll = str(vroll('1d4').total)
	return_fields += f'-f "Lingering Injury|{lingering_list[lingering_roll]}"'
</drac2>
{{return_title}}
{{return_desc}}
{{return_fields}}
{{return_footer}}
-thumb <image> -color <color>