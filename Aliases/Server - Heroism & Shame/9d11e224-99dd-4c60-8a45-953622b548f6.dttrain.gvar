-title "**Downtime Activity: {{title}}**" -thumb <image> -color <color>
<drac2>
ch=character()
if len(args) < 3: # Checks to make sure there is at least 3 arguments
	err("Not enough arguments - See `!dttrain-help`")
t = ["charisma","wisdom","strength","dexterity","intelligence","constitution"] # Defines the skills that can be used to train
skill=[x for x in t if args[2].lower() in x.lower()] # Loops through every skill and checks to see if any of them match the third argument
skill=skill[0] # Array -> String

if not skill:									# If the skill is not set,
	err("Invalid Skill - See `!dttrain-help`")  # Spit out an error

skill_b = ch.skills[skill] if skill in ch.skills else err('Skill bonus not found')# Get the skill bonus for the Skill
slot_c = "DT Slot" # Sets the name for the DT Slot CC
train_c = cc # Sets the name for the training CC based on arguments from alias
ch.create_cc_nx(slot_c, 0, 2, "none", "bubble") # Create DT Slot CC if it doesn't exist
ch.create_cc_nx(train_c, 0, days, "none", None) # Create Training CC if it doesn't exist

if ch.get_cc(train_c) == days: # If the value of the training CC equals the max value,
	ch.set_cc(train_c, 0)      # Reset the training CC to 0
	
pargs = argparse(args[3:]) # Gets any args after the base 3, parses them, and places them into pargs
mentor = True if pargs.get("mentor") else False # Sets the mentor variable to true if -mentor is passed
roll_str = "1d20+" # Sets the base roll string

if mentor or pargs.adv()==1: # If there is a mentor or adv is passed,
	roll_str = "2d20kh1+"    # Set roll string to adv
elif pargs.adv() == -1:      # Else, if dis is passed
	roll_str = "2d20kl1+"    # set the roll string to dis

roll_str+=str(skill_b) # Append the skill bonus to the finished base roll string

if pargs.get("b"):					# If there is one or more bonuses passed to the alias
	for bonus in pargs.get("b"):    # Loop through every one passed
		roll_str += f'+{bonus}'     # And append it to the roll string
</drac2>
<drac2>
# Take away money (if applicable)
coin_string = ''
if exists('cost'):
    plat_cost = int(cost/10)
    # Add coins to bag
    bags_before = load_json(get('bags', 0))
    if bags_before is not 0:
        coin_bag_before = [bag for bag in bags_before if bag[0] == 'Coin Pouch'][0]
        index = bags_before.index(coin_bag_before)
        bag = coin_bag_before[1]
        # Check for Platnium first
        if bag.pp >= plat_cost:
            plat_before = bag.pp
            bag['pp'] -= plat_cost
            plat_after = bag.pp
            coin_string = f'-f "Removed Coins|{plat_before} pp -> {plat_after} pp"'
        # Then, check for gold
        elif bag.gp >= cost:
            gold_before = bag.gp
            bag['gp'] -= cost
            gold_after = bag.gp
            coin_string = f'-f "Removed Coins|{gold_before} gp -> {gold_after} gp"'
        else:
            err("Not enough funds to do this training!")
        # Reset coin pouch
        coin_bag_after = ['Coin Pouch', bag]
        bags_before[index] = coin_bag_after
        ch.set_cvar('bags', dump_json(bags_before))
    else:
        err('No coin bag found.')
</drac2>
<drac2>
R = vroll(roll_str) # Roll the dice
crit_type = int(R.result.crit) # Store 0 (normal), 1 (crit success), 2 (crit fail) into variable
success = True if R.total >= dc else False # Check to see if we passed
mod_amount = 0 # Init mod amount
mentor_double = get('mentor_test', True)
if success:				# If we succeded:
	mod_amount += 1		# Add +1 Training days
	if crit_type == 1:  # If it's a crit
		mod_amount += 1 # Add another day
	if mentor and mentor_double:
		mod_amount *= 2 # If there's a mentor than double the progress of the day
else:					# If we don't succed
	if crit_type == 2:  # 	If it's a crit fail
		mod_amount -= 1 # Take away one
		if mentor and mentor_double:			# If there's a mentor
			mod_amount -= 1 # Take away another point
ch.mod_cc(train_c, mod_amount) # Modify training CC by amount determined

dt_amount = get('dt', 1)
</drac2>
-desc """
**Character:** {{name}}{{f'\n**Mentor:** {pargs.get("mentor")[0]}' if mentor else None}}
**Date:** {{args[0]}}
**Training:** {{args[1]}}
**Checking:** {{skill.title()}}
**Rolled:** {{str(R)}}
Remaining DTD slot: **{{ch.mod_cc("DT Slot", -dt_amount)}}{{ch.cc_str("DT Slot")}}**
"""
-f """Result|
{{"You **passed** the DC "+str(dc)+"!" if success else None}}{{"You **failed** the DC "+str(dc)+"!" if not success else None}}{{"\n**Crit Success!**" if crit_type==1 else None}}{{"\n**Crit Failure!**" if crit_type==2 else None}}
Training Progress: {{ch.cc_str(train_c)}} ({{"+" if mod_amount>0 else ""}}{{mod_amount}}){{f'\nYou finished training {args[1]}!' if ch.get_cc(train_c)>=days else None}}
"""
{{coin_string}}