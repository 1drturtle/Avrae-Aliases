tembed -title "{{name}}: Criminal Downtime" -desc "Requires 2 Downtime Slots" -thumb {{image}} -footer "!dt criminal [withhelp] [iadv] [badv] [padv] [-ib X] [-bb X] [-pb X][-rr X]"
{{pargs=&ARGS&}}
<drac2>
pargs=argparse(pargs)      #parse args from the alias
#set all rolls
defroll,advroll,ratgp,middlegp,modestgp,noblegp= "1d20+","2d20kh1+","1d4+1","1d6+10","1d8+30","1d10+100"
#set all counters
earnmod,coincount,totalCred,heatCounter,repeat= 0,0,0,0,int(pargs.get("rr")[0]) if pargs.get("rr") else 1
#get current heat and credits
oheat, ocred = character().get_cc("Heat"), character().get_cc("Street Cred")
character().create_cc_nx("Heat", 0, None, None, None) #makes sure they got a Heat counter, like a good criminal should
character().create_cc_nx("Street Cred", 0, None, None, None) #makes sure they got a Street Cred Counter
#set main string
returnstr = f''
# Now we build all the roll bonuses and the specified bonuses for [-ib] [-bb] [-pb]
intelbonus = str(max(character().skills.investigation.value, character().skills.perception.value))
blendingbonus = str(character().skills.stealth.value)
pickbonus = str(max(character().skills.sleightOfHand.value, character().skills.performance.value))
ib = "+"+pargs.join('ib', '+') if parg.get("ib") else ""
bb = "+"+pargs.join('bb', '+') if parg.get("bb") else ""
pb = "+"+pargs.join('pb', '+') if parg.get("pb") else ""
# then we iterate through all the rolls number of times of rr, setting total
for i in range(repeat):
#make all the rollstr
  intelroll = vroll(advroll+intelbonus+ib) if pargs.get("withhelp") or pargs.get("iadv") else vroll(defroll+intelbonus+ib)
  blendingroll = vroll(advroll+blendingbonus+bb) if pargs.get("withhelp") or pargs.get("badv") else vroll(defroll+blendingbonus+bb)
  pickroll = vroll(advroll+pickbonus+pb) if pargs.get("withhelp") or pargs.get("padv") else vroll(defroll+pickbonus+pb)
  returnstr += f' -f "Attempt #{i+1}|'
#define what kinda victim you got
  returnstr += f'**Intel**: {intelroll.full} '
  if intelroll.total >= 21:
    returnstr += f'(Wealthy Noble)\n'
    earnroll = vroll(noblegp)
  elif intelroll.total >= 15:
    returnstr += f'(Modest Individual)\n'
    earnroll = vroll(modestgp)
  elif intelroll.total >= 10:
    returnstr += f'(Middle Class)\n'
    earnroll = vroll(middlegp)
  else:
    returnstr += f'(Commoner)\n'
    earnroll = vroll(ratgp)
#define the useless second roll
  returnstr += f'**Blending**: {blendingroll.full} '
  if blendingroll.total >=21:
    returnstr += f'(Expertly hidden)\n'
  elif blendingroll.total >=15:
    returnstr += f'(Very well hidden)\n'
  elif blendingroll.total >=10:
    returnstr += f'(Well hidden)\n'
  else:
    returnstr += f'(**Spotted**, take Heat `+1`)\n'
    character().mod_cc("Heat", +1) #take it!
    heatCounter += 1
#define the earning mod roll
  if blendingroll.total >= 10: #autofails if second roll is failed
    returnstr += f'**Pick-pocket**: {pickroll.full} '
    if pickroll.total >= 21:
      returnstr += f'(Perfect 100%)\n'
      earnmod = 1
    elif pickroll.total >= 15:
      returnstr += f'(Decent 75%)\n'
      earnmod = .75
    elif pickroll.total >= 10:
      returnstr += f'(Light 50%)\n'
      earnmod = .5
    else:
      returnstr += f'(**Caught**, take Heat `+2`)\n'
      earnmod = 0
      character().mod_cc("Heat", +2) #take it!
      heatCounter += 2
  else:
    returnstr += f'**Pick-pocket**: AutoFail. You were spotted.\n'
    earnmod = 0
  #Successful Crime, get the Cred
  successCrime = True if blendingroll.total >= 10 and pickroll.total >= 10 else False
  character().mod_cc("Street Cred", +1) if successCrime else 0
  totalCred = totalCred +1 if successCrime else totalCred+0
  #coins calculations for this attempt
  coinearn = earnroll.total * (earnmod)
  coincount += coinearn
  returnstr += f'- Earnings: {earnroll.full} x {str(earnmod*100)}% = `{coinearn}`\n' if successCrime else f''
  returnstr += f'- Street Cred: `1`' if successCrime else f''
  returnstr += f'"\n'
# adds all the coins and puts in the good ol coin pouch
#breaks down into gp sp and cp
ngp = int(coincount)
nsp = (coincount - ngp)*10
ncp = int((nsp-int(nsp))*10)
nsp = int(nsp)
bagsLoaded=load_json(bags) #load the bags
pouch=([x for x in bagsLoaded if x[0]=="Coin Pouch"])[0] #load the coinpouch
ogp = pouch[1]['gp'] # what gp was before?
pouch[1].update({'gp':pouch[1]['gp']+ngp, 'sp':pouch[1]['sp']+nsp, 'cp':pouch[1]['cp']+ncp}) #updates new quantities locally
pouch in bagsLoaded or bagsLoaded.append(pouch)
set_cvar("bags",dump_json(bagsLoaded)) #dumps the coins back to the cvar
# builds the final rollup field
returnstr += f' -f "Totals:|\n-Earnings: `{ogp}` -> `{coincount+ogp}` gp\n-Heat: `{oheat}` -> `{heatCounter+oheat}`\n- Cred: `{ocred}` -> `{totalCred+ocred}`"'
return returnstr
</drac2>